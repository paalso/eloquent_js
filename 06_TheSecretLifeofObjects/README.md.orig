[3. The Secret Life of Objects](https://eloquentjavascript.net/2nd_edition/06_object.html)

[3. Тайная жизнь объектов](https://eloquent-javascript.karmazzin.ru/chapter6)

#### Про проект "Таблица", к-й используется для демонстрации основных концепций ООП в JS

Долго и с трудом разобрался. Код для новичка сложен, и объяснений автор дает
недостаточно - разбирал как Шампольон иероглифы. Кроме того неудобно, что последовательность изложения логики организации кода была инвертирована - предлагался код, но для чего разъяснялось позднее.

Вкратце повторю чтобы зафиксировать как все устроено.

Цель: конвертация информации в таком формате:
```javascript
var MOUNTAINS = [
  { name: "Kilimanjaro\n(Kenya)", height: 5895, country: "Africa" },
  { name: "Everest\n(Asia)", height: 8848, country: "Nepal" },
  { name: "Mount Fuji\n(Asia)", height: 3776, country: "Japan" },
  { name: "Mont Blanc", height: 4808, country: "Italy/France" },
  { name: "Vaalserberg", height: 323, country: "Netherlands" },
  { name: "Denali", height: 6168, country: "United States\n(Alaska)" },
  { name: "Popocatepetl", height: 5465, country: "Mexico" }
];
```
в одну строку для дальнейшего вывода на экран в "виде красивых таблиц" вроде

<<<<<<< HEAD
    name         height country      
    ------------ ------ -------------
    Kilimanjaro    5895 Africa       
    (Kenya)                          
    Everest        8848 Nepal        
    (Asia)                           
    Mount Fuji     3776 Japan        
    (Asia)                           
    Mont Blanc     4808 Italy/France 
    Vaalserberg     323 Netherlands  
    Denali         6168 United States
                        (Alaska)     
    Popocatepetl   5465 Mexico    
=======
   name         height country      
   ------------ ------ -------------
   Kilimanjaro    5895 Africa       
   (Kenya)                          
   Everest        8848 Nepal        
   (Asia)                           
   Mount Fuji     3776 Japan        
   (Asia)                           
   Mont Blanc     4808 Italy/France 
   Vaalserberg     323 Netherlands  
   Denali         6168 United States
                       (Alaska)     
   Popocatepetl   5465 Mexico    
>>>>>>> 18e07accbf24c77215ef23c7913963c1d05a0031

Преобразование исходного набора данных в массив стандартизованных для вывода блоков осуществляет функция
```javascript
/**
 * Трансформирует массив объектов, содержащих исходное содержание таблицы
 * в массив стандартизованных для вывода блоков TextCell
 * @param {array} data исходный "сырой" массив объектов (см. MOUNTAINS)
 * @return {array} массив массивов, где каждый внутренний массив –
 * это массив ячеек TextCell (объектов, обладающих методами minHeight(), minWidth())
 */
function dataTable(data) {...
```

TextCell - это объект, обладающий интерфейсом
- minHeight() возвращает число, показывающее минимальную высоту, которую
требует ячейка (выраженную в строчках),
- minWidth() возвращает число, показывающее минимальную ширину, которую требует ячейка (выраженную в символах)
- draw(width, height) возвращает массив длины height, содержащий наборы строк,
каждая из которых шириной в width символов. Это содержимое ячейки

Полученный массив преобразует в строку функция
```javascript
/**
 * @param {array} rows массив массивов, где каждый внутренний массив –
 * это массив ячеек TextCell (объектов, обладающих методами minHeight(), minWidth())
 * @return {string} строка, включающая все содержимое таблицы (строки таблицы 
 *                  разделены "\n" готовая для печати)
 */
function drawTable(rows) {
```

Которая, в свою, очередь, использует функции
```javascript
/**
   * Обрабатывает отдельную строку row таблицы с номером rowNum
   * @param {array} row массив блоков TextCell
   * @param {Number} rowNum номер row
   * @return {string} строка, состоящая из всех строк row, находящихся
   * на одном уровне, соединенных "\n", т.е. состоящая из всего содержимого row
   */
  function drawRow(row, rowNum) {
```
и
```javascript
/**
   * drawLine выцепляет строки, которые должны появляться рядом друг с
   * другом из массива блоков, и соединяет их через пробел, чтобы создать промежуток в один символ между столбцами таблицы.
   * @param {array} blocks массив блоков стандатизованного размера, к-е представляют собой массивы строк (одинакового размера)
   * @return {string} строка текста, состоящая из строк, входящих в blocks,
   * находящиеся на одном "уровне", соединенные пробелами, при выводе представялющие собой одну строку
   */
  function drawLine(blocks, lineNo) {
```

Интерфейс TextCell может усовершенствоваться приданием дополнительных возможностей, например
- вводится интерфейс UnderlinedCell - обертка над TextCell, позволяющая дополнительно помещать под содержимым ячейки подчеркивание,
или
- RTextCell, к-й наслелуется от TextCell и предназначается для выравнивания содержимого ячейки по правому краю
